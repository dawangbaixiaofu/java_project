并行：多个CPU同时执行多个任务，比如:多个人同时做不同的事
并发：一个CPU（采用时间片）同时执行多个任务

进程和线程的区别？
进程包括线程
进程：启动一个LOL.exe就叫一个进程。 接着又启动一个DOTA.exe，这叫两个进程。
线程：线程是在进程内部同时做的事情，比如在LOL里，有很多事情要同时做，
比如"盖伦” 击杀“提莫”，同时“赏金猎人”又在击杀“盲僧”，这就是由多线程来实现的。


多线程即在同一时间，可以做多件事情。


线程的调度：
	时间片：线程的调度采用时间片轮转的方式
	抢占式：高优先级的线程抢占CPU
线程的优先级：
	MAX_PRIORITY:10
	MIN_PRIORITY:1
	NORM_PRIORITY:5




创建多线程有3种方式，分别是:
	1.继承线程类;
	2.实现Runnable接口;
	3.匿名类

线程的相关API
currentThread() 静态方法，返回执行当前代码的线程
start
run() 线程要执行的操作，一般需要重写Tread类中的这个方法
getName() 获取当前线程的名字
setName
yield 主动释放当前线程的执行权
join 在线程中插入执行另一个线程，该线程被阻塞，
	直到插入执行的线程完全执行完毕以后，该线程才继续执行下去
stop 
sleep
isAlive

多线程和静态变量
	所有线程共享类静态变量

继承线程类 extend Thread
	1.创建一个集成于Thread类的子类 （通过ctrl+o（override）输入run查找run方法）
	2.重写Thread类的run（）方法
	3.创建Thread子类的对象
	4.通过此对象调用start（）方法
实现Runnable接口 implements Runnable
	1.创建一个实现了Runable接口的类
	2.实现类去实现Runnable中的抽象方法：run()
	3.创建实现类的对象
	4.将此对象作为参数传递到Thread类中的构造器中，创建Thread类的对象
	5.通过Thread类的对象调用start（）
	同一个对象可以使用Thread()创建多个线程对象，共享数据


3.实现callable接口
 比runable多一个FutureTask类，用来接收call方法的返回值，可以抛出异常
 callable实现新建线程的步骤：
 * 1.创建一个实现callable的实现类
 * 2.实现call方法，将此线程需要执行的操作声明在call()中
 * 3.创建callable实现类的对象
 * 4.将callable接口实现类的对象作为传递到FutureTask的构造器中，创建FutureTask的对象
 * 5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start方法启动
    （通过FutureTask的对象调用方法get获取线程中的call的返回值）
