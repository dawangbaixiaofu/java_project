target
java基础学习stage1
java项目练习
《呼吸》reading 完毕
聊天进度把控

10号
java笔记  
1.怎么查看java源代码？点开.class文件，点击"attached source"
2.类库包 包括三部分：源码，字节码，帮助文档
final关键字
final类不能被继承
final方法不能被重载
final修饰的变量“一旦赋值之后，不能重新进行赋值”
final修饰实例变量不许进行初始化。或者在构造函数中进行赋值
final修饰的引用指向的对象不能再指向其他对象。但是所指向的
对象内部的内存可以被修改。
final修饰的实例变量，一般和static联合使用，为常量。
为了节省空间。不需要每个实例都开辟内存空间，来保存final实例变量

package 和 import

包的命名规范：
	公司域名倒序+项目名+模块名+功能名
一个包对应一个目录

包在java中的作用？
lang包不需要手动导入，系统自动导入
lang 是language语言包，是java语言的核心包

访问控制修饰符
public private protected

protected同包下，子类中可以访问
缺省： 同包下可以访问

修饰符范围
private<缺省<protected<public

类只能使用public和缺省修饰符进行修饰【内部类除外】


抽象类
1.抽象类无法被实例化
2.抽象类可以有构造方法，构造方法是给子类创建对象使用
3.抽象类中可以定义抽象方法，语法 public abstract method_name();
4.抽象类中不一定有抽象方法。但是一旦有且非抽象类继承抽象类必须对抽象类中的抽象方法进行重写实现。
一个非抽象的类继承抽象类，必须对抽象类中的抽象方法进行重写。


接口：
接口的语法创建
1.[修饰符] interface 接口名{}
2.接口中只能出现常量和抽象方法。
3.接口是一个特殊的抽象类，特殊在接口是纯抽象的。接口中没有构造方法，无法被实例化。
4.接口和接口之间可以多继承，即一个抽象类可以是多个抽象类的子类
5.一个类可以实现多个接口
6.一个非抽象类实现接口，需要将接口中所有的抽象方法“实现、重写、实现”
tips：
java中类不能多继承，但是接口可以。
在接口中抽象方法语法为public abstract 可以省略
常量的声明中public static final也是可以省略的

11号
脐 年轻地球创造论的假设演绎
焦虑是自由的眩晕 平行世界实现的假设探索


接口的作用？
1.可以使项目分层，所有层都面向接口，开发效率提高
2.接口使代码和代码之间的耦合度降低，实现代码可插拔
在抽象类和接口都可以使用的时候，建议使用抽象类。
1.接口可以实现多继承
2.类在实现接口的同时也可以实现继承

Object类介绍
Object类是java中所有类的超类，是根类
常用的方法
1.equals()
equals比较两个引用类型的地址，如果地址相同，返回true，否则返回false

2.finalize()
finalize方法不需要程序员调用，有系统自动调用；
finalize对象如果没有更多的引用指向他，则该java
对象成为垃圾回收数据，等待垃圾回收器的回收，垃圾
回收器再回收这个java对象之前会自动调用该对象的finalize方法

3.hashCode()
返回该对象的哈希码值
java对象的内存地址经过哈希算法得出的int类型的数值；
该方法的源代码是c++写的。

4.toString() 返回对象的字符串表示；可以进行重写称为自己能够理解的信息
	print方法括号中如果是一个引用对象，默认会调用引用对象的toString方法
5.clone
创建并返回对象的一个副本


内部类
内部类可以访问外部类私有的数据
静态内部类
静态内部类可以直接访问外部类的静态数据，无法直接访问成员。

成员内部类
等同看待为成员变量
可以访问外部类所有的数据

匿名内部类

局部内部类
在方法内部定义类； 等同于局部变量
局部内部类访问局部变量的时候，局部变量必须使用final修饰
局部内部类不能使用访问控制符修饰


UML图
类与类之间的关系 泛化关系 继承
实现关系 类与接口之间的关系
关联关系 类与类之间有联系
聚合关系 是关联关系的一种，是较强的关联关系，是整体和部分的关系。
如汽车和轮胎。教师和学生。与关联关系不同，关联关系的类是处于同一个
层次上，而聚合关系的类是处于不同层次上。一个代表整体一个代表部分。
	classromm student之间的关系


合成关系
合成关系和聚成关系相似，区别是整体和部分是紧密相连的。
整体的生命周期决定了部分的生命周期。
例子：人 与 四肢 

依赖关系 
一个类的实例是另个类方法中的变量，形成依赖关系。

is-a is-like-a has-a
is-a 类与类之间的继承关系
is-like-a 是类与接口之间的实现关系
has-a 是关联关系 

12
异常

1.异常的分类
异常的继承关系
Object
 Throwable
  Error  错误不能处理只能退出
  Exception异常是可以处理的，如果没有处理异常则直接退出java程序
   RuntimeException 运行异常
   编译异常 Exception直接子类都是编译异常

在编写阶段必须对编译异常进行处理，否则不能通过编译；
编译异常是发生几率比较高的事件
对编译异常进行处理的两种方式：
・捕捉 try ... catch ...
・声明抛出 throws

RuntimeException在编写程序阶段不需要进行处理
发生几率比较低的事件

2.异常的处理
处理两种方式
・声明抛出 throws

・捕捉 try catch
 try catch可以捕获多个异常，catch语句块可以写多个，但是有顺序。
 必须从上到下，有小到大。多个catch语句块，只会执行第一个捕获异常的语句块，后面的不会执行。
异常捕捉内部机制：
程序发生异常，JVM会自动创建一个异常类型的对象，将该对象的内存地址赋值给catch语句块中
的e变量。


getMessage 
信息不是很详细，只给出异常的内容
printStackTrace()
打印异常堆栈信息

13
finally语句块
try 
{}
finally
{}
即使没有catch语句finally语句块中的内容也会被执行。
这个时候要使用throws关键字

try{}
catch{}
finally{}
语句块finally一定会执行，一般在这个语句块中释放资源。



3.自定义异常

4.方法覆盖与异常


数组
常用类
集合
IO流
多线程
反射机制


Spring架构
其他架构